import bpp.*;

void create(int i) 
{
  File f = new File("lazy.dat");
  if (f.exists()) f.delete();
  if (i >= 0) {
    OutputStream out=new FileOutputStream(f);
    for (int j=0; j<i; ++j) out.write('a'+j);
    out.close();
  }
}

void same(int i) 
{
  File fBefore = new File("lazy.dat");
  long modBefore = fBefore.lastModified();
  Thread.sleep(1000);

  if (i >= 0) {
    OutputStream out=new LazyFileOutputStream(fBefore);
    byte[] data=new byte[i];
    for (int j=0; j<i; ++j) out.write('a'+j);
    out.close();
  }

  File fAfter = new File("lazy.dat");
  long modAfter = fAfter.lastModified();
  
  if (modBefore != modAfter) {
    System.out.println("*** same(" +i+ ") failed!");
  } else {
    System.out.println("same(" +i+ ") passed.");
  }
}


void truncate(int i) 
{
  File fBefore = new File("lazy.dat");
  long modBefore = fBefore.lastModified();

  OutputStream out=new LazyFileOutputStream(fBefore);
  out.close();

  File fAfter = new File("lazy.dat");
  if (fAfter.length() != 0) {
    System.out.println("*** truncate(" +i+ ") failed!");
  } else {
    System.out.println("truncate(" +i+ ") passed.");
  }
}

void abc(i)
{
  File fBefore = new File("lazy.dat");
  long modBefore = fBefore.lastModified();

  OutputStream out=new LazyFileOutputStream(fBefore);
  byte[] data = new byte[] { 'a', 'b', 'c' };
  out.write(data);
  out.close();

  File fAfter = new File("lazy.dat");
  if (fAfter.length() != 3) {
    System.out.println("*** abc(" + i+ ") wrong length (" + fAfter.length() + ")");
  } else {
    InputStream in = new FileInputStream(fAfter);
    byte[] data = new byte[3];
    in.read(data);
    if (data[0] != 'a' || data[1] != 'b' || data[2] != 'c') {
      System.out.println("*** abc(" + i + ") failed.");
    } else {
      System.out.println("abc(" + i + ") passed.");
    }
    in.close();
  }
}

void test(int i) {
  create(i); same(i);
  create(i); truncate(i);
  create(i); abc(i);
}

for (int i=-1; i<10; ++i) {
  test(i);
}
